<?php

namespace Mb\UniversityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRepository extends EntityRepository
{
	
	private function getPlaces($university,$department,&$em){
		$qb = $em->createQueryBuilder();
		$qb->select("p")
		->from('MbUniversityBundle:Place','p')
		->join('p.university', 'u')
		->join('p.department', 'd')
		->andWhere('u.id = :university')
		->andWhere('d.id = :department')
		->setParameters(array('university' => $university->getId(),
			'department' => $department->getId()));

		return $qb->getQuery()->getResult();
	}

	private function tryToGetPlace(&$places,&$mobilityPeriods){
		$place =null;

		foreach ($places as $t_place) {//geting an existing value
			$t_place_mobility_periods = $t_place->getMobilityPeriod()->getValues();
			$inter = array_uintersect($t_place_mobility_periods,$mobilityPeriods,function($a,$b){
				return $a->getId() - $b -> getId();
			});
			if(count($inter)==count($t_place_mobility_periods) &&  count($inter) == count($mobilityPeriods))
				$place = $t_place;
		}
		return $place;
	}

	/**
	 * remove existing mobility period for an university and a department and create new in the given (new) place
	 * 
	 * @param $place	The existings places
	 * @param $place	The new place
	 * @param $mobilityPeriod	The concerned mobilityPeriods : every other mobility periods will not be affected
	 * @param $em the entity manager (needed)
	 * */
	private function computeMobilityPerdiod(&$places,&$place,&$mobilityPeriods,&$em){
		foreach ($places as $t_place) {//remove elements of existing mobilityPerdiods 
			// getting mobility periods corresponding to current $t_place
			$t_place_mobility_periods = $t_place->getMobilityPeriod()->getValues();
			//getting a new array with only the concerned mobilityPeriods
			$inter = array_uintersect($t_place_mobility_periods,$mobilityPeriods,function($a,$b){
				return $a->getId() - $b -> getId();
			});
			
			//move every elements of $inter from $t_place to $place
			foreach ($inter as $value) {
				//$t_place->removeMobilityPeriod($value);
				$place ->addMobilityPeriod($value);
			}

			//if $t_place get no mobilityPeriod remove it else persist it
			// if(count($t_place->getMobilityPeriod())==0)	
			// {
				// $em->remove($t_place);
			// }
			// else{	
			$em->persist($t_place);
			// }
		}
		
		//add the remaining mobilityPeriod in place
		foreach ($mobilityPeriods as $value) {
			$place ->addMobilityPeriod($value);
		}

	}
	
	/**
	 * get the first place or create a new one
	 * 
	 * @param $number	Number of place in for the current place
	 * @param $mobilityPeriods	all the concerned mobility periods
	 * @param $$university	the concerned university
	 * @param $department	the concerned department
	 * @param $em	the entity manager (optional)
	 * 
	 * @return the place (created or not)
	 * */
	public function getFirstOrCreate($number,$mobilityPeriods,$university,$department,$em = null){
		if(!$em)
			$em =  $this->getEntityManager();

		
		
		$number = ((int)($number));
		
		$places = $this->getPlaces($university,$department,$em);
		
		//try to get place or create it
		$place = $this->tryToGetPlace($places,$mobilityPeriods);
		if(!$place){
			$place = new Place();
			$place->setUniversity($university);
			$place->setDepartment($department);
			$this->computeMobilityPerdiod($places,$place,$mobilityPeriods,$em);
		}
		
		$place->setPlaces($number);
		
		//needed in every case ? 
		$em->persist($place);

		return $place;

	}
	
	
	/*rend les places du département*/
	public function getAllOrder($department){

		$qb= $this->createQueryBuilder('p');

		$qb	->where('p.department = :department')
		->setParameter('department', $department);

		$qb
		->leftjoin('p.university', 'u')
		->addSelect('u');
		
		$qb
		->leftjoin('u.country', 'c')
		->addSelect('c');
		
		$qb
		->orderBy('c.name', 'ASC');

		
		$query = $qb->getQuery();

		$results = $query->getResult();
		
		return $results;

	}

	
	
	//Mobility Periods => array de mobility pariods, number =>places que l'ont attribue
	public function getFirstOrCreate2($number,$mobilityPeriods,$university,$department,$em = null){
		if(!$em)
			$em =  $this->getEntityManager();

		

		$number = ((int)($number));
		
		$places = $this->getPlaces($university,$department,$em);
		
		$place = $this->tryToGetPlace($places,$mobilityPeriods);


		if(!$place){
			$place = new Place();
			$university->addPlace($place);
			$place->setDepartment($department);
			foreach($mobilityPeriods as $mobilityPeriod){
				$place->addMobilityPeriod($mobilityPeriod);
			}
		}
		$place->setPlaces($number);
		$em->persist($place);

		return $place;

	}
	
	
	public function createPlace($universityName,$countryName,$places,$mobilityPeriodArray,$department){
		$em  = $this->getEntityManager();
		$repository = $em->getRepository('MbUniversityBundle:Country');
		$country = $repository->getFirstOrCreate($countryName);
		$em->flush();
		$repository = $em->getRepository('MbUniversityBundle:University');
		$university = $repository->getFirstOrCreate($universityName,$country);
		$em->flush();

		$this->getFirstOrCreate2($places,$mobilityPeriodArray,$university,$department);			
	}
	
	/*Update placeRest*/
	public function updatePlacesRestantes($department){

		$em = $this->getEntityManager();

		$repository = $em
		->getRepository('MbUserBundle:User');

		//On récupère les étudiants concernés
		$listStudents = $repository->getAllWishUser2($department);
		
		$listPlaces = $this->findBy(
			array('department' => $department)
			);

		$listProblem = array();	

		
		foreach($listPlaces as $place){
			$place->setPlacesRest($place->getPlaces());
		}
		
		foreach($listStudents as $student){
			$placement = $student->getPlacement();
			if($placement != null){
				$place = $placement->getPlace();
				$place->setPlacesRest($place->getPlacesRest()-1);
				if($place->getPlacesRest() < 0 && !in_array($place->getUniversity(),$listProblem) ){
					array_push($listProblem,$place->getUniversity());
				}
			}
		}
		$em->flush();
		return $listProblem;
	}

	
	
}
