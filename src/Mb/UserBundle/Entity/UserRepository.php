<?php

namespace Mb\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	
	
	
	
	//Recupere les users étant soit en 4 soit en 3 ou alors tous($yearstudy), du département et ayant fait au moins un voeux cette année
	public function getAllWishUser($yearStudy, $department)
	{


		$qb= $this->createQueryBuilder('u');

		//jointure avec wish pour avoir que ceux ayant fait un voeux cet année
			$qb
				->join('u.wishes', 'w')
				->addSelect('w');

				
			
		//Recupere l'année courante pour prendre que les voeux de cette année
			$repository = $this
			->getEntityManager()
			->getRepository('MbMainBundle:Year');

			$year = $repository->getCurrentYear();	
				
			$qb->where('w.year = :year')
				->setParameter('year',$year)
				->andWhere('u.roles LIKE :roles')
				->setParameter('roles', '%"ROLE_STUDENT"%')
				->andWhere('u.department = :department')
				->setParameter('department', $department);
			
			
		//trie sur la moyenne
			$qb
			->orderBy('u.mean', 'DESC');

		//filtre sur l'année d'étude
			if($yearStudy == 3 || $yearStudy == 4){
				$qb
				->andWhere('u.yearStudy = :study')
				->setParameter('study',$yearStudy);
			}




		



			$query = $qb->getQuery();

			$results = $query->getResult();


			usort($results,
				function ($a, $b) {
					if ($a->getMean() == $b->getMean()) {
						return 0;
					}
					return ($a->getMean() < $b->getMean()) ? 1 : -1;
				});

			return $results;
		}
		
		
		//Récupère les utilisateurs ayant fait un voeux cette année, selon l'ordre voulu (alterné ou d'abord 4 ensuite 3)
		public function getAllWishUser2($department)
		{
			$listStudent4 = $this->getAllWishUser(4,$department);
		    $listStudent3 = $this->getAllWishUser(3,$department);
			$listStudent = array();

			//Selon l'algorithme d'affectation du départment
			if($department->getAlgo()==0){
				$j = count($listStudent3);
				  $k = 0;

				  for($i = 0; $i < count($listStudent4); $i++){
					  $user = $listStudent4[$i];
					  array_push($listStudent,$user);
					  if($k<$j){
						$user = $listStudent3[$k];  
						array_push($listStudent,$user);
						$k++;
					  }
				  }

				  for($k; $k<$j;$k++){
					$user = $listStudent3[$k];
					array_push($listStudent,$user); 
				  }
			}else{
				foreach($listStudent4 as $student){
					array_push($listStudent,$student);
				}
				foreach($listStudent3 as $student){
					array_push($listStudent,$student);
				}
				
			}
			return $listStudent;
		}
		
//Recupere tous les étudiants ayant fait un voeux pour une certaine universitéede cette annéeetce départment
		public function findUsersWishes($university,$department){
			
			$qb=$this->createQueryBuilder('u');
			
			$repository = $this
			->getEntityManager()
			->getRepository('MbMainBundle:Year');

			$year = $repository->getCurrentYear();
			
			$qb
			->leftjoin('u.wishes', 'w')
			->addSelect('w')
			->leftjoin('w.place', 'p')
			->addSelect('p')
			->leftjoin('p.university', 'n')
			->addSelect('n');


			$qb->where('w.year=:year')
			->setParameter('year',$year)
			->andWhere('n.id =:univ')
			->setParameter('univ', $university)
			->andWhere('u.department =:department')
			->setParameter('department', $department)
			->orderBy('u.name','ASC');


			$query = $qb->getQuery();

			$results = $query->getResult();

			return $results;
		}
		
//Recupere tous les étudiant allant dans cette universitée
		public function findUsersHadGo($university){
			
			$qb=$this->createQueryBuilder('u');
			
			$repository = $this
			->getEntityManager()
			->getRepository('MbMainBundle:Year');

			$year = $repository->getCurrentYear();
			
			$qb
			->leftjoin('u.placement', 'p')
			->addSelect('p')
			->leftjoin('p.place', 'p2')
			->addSelect('p2')
			->leftjoin('p2.university', 'n')
			->addSelect('n');


			$qb->where('u.active=:active')
			->setParameter('active',true)
			->andWhere('n.id =:univ')
			->setParameter('univ', $university)
			->andWhere('p.temp =:temp')
			->setParameter('temp', 0)
			->orderBy('p.year','ASC');


			$query = $qb->getQuery();

			$results = $query->getResult();

			return $results;
		}	


		//Recupere tous les utilisateurs d'un département, actif ou non
		public function getAllUsers($department,$onlyActive){

			$qb=$this->createQueryBuilder('u');

			$qb->where('u.roles LIKE :roles')
			->setParameter('roles', '%"ROLE_STUDENT"%')
			->andWhere('u.department = :department')
			->setParameter('department', $department);
			
			if($onlyActive){
				$qb->andWhere('u.active=:active')
				->setParameter('active',true);
			}

			$qb->orderBy('u.name','ASC');
			
			
			$query = $qb->getQuery();

			$results = $query->getResult();

			return $results;
		}

		//Récupère les étudiants concerné par les filtre: period = 3 = S7 S8, 4 = S9 S10, 5 = Double Diplome, year annee du placement
		public function getJury($department,$year,$period){

			$qb=$this->createQueryBuilder('u');

			$qb->where('u.roles LIKE :roles')
			->setParameter('roles', '%"ROLE_STUDENT"%')
			->andWhere('u.department = :department')
			->setParameter('department', $department)
			->leftjoin('u.placement', 'p')
			->addSelect('p')
			->leftjoin('p.mobilityPeriod', 'm')
			->addSelect('m')
			->andWhere('p.temp = :temp')
			->setParameter('temp',0)
			->andWhere('p.year = :year')
			->setParameter('year',$year)
			->andWhere('m.type = :firstPeriod or m.type = :secondPeriod');
			
			if($period==3){
				$qb->setParameter('firstPeriod','S7' )
				->setParameter('secondPeriod','S8');
			}elseif($period == 4){
				$qb->setParameter('firstPeriod','S9' )
				->setParameter('secondPeriod','S10');

			}else{
				$qb->setParameter('firstPeriod','Double Diplôme' )
				->setParameter('secondPeriod','Double Diplôme');
			}
			
			
			
			
			

			$qb->orderBy('u.name','ASC');
			
			
			$query = $qb->getQuery();

			$results = $query->getResult();

			return $results;
		}


		
		
		//Sert pour l'exportation en csv
        public function transformToExportableArray($userList){
        	$a = array();
        	$a[]= array("Voeux n°","Validée","Nom","Prenom","Moyenne","Promo","Pays","Affectation temporaire","Période","","Choix1","Choix2","Choix3","Choix4");
        	//get the entity corresponding to double diploma, to exclude it in the futur
        	$ddEntity = $this
		            ->getEntityManager()
		            ->getRepository('MbUniversityBundle:MobilityPeriod')
		            -> getFirst("Double diplôme");

        	foreach ($userList as  $u) {
        		$wishes = $u->getWishes();
        		$doubleDiplome = false;
        		$mp = null;
        		$firstWish = null;

        		$affectationWishNumber =0;
        		$affectation = $u->getPlacement();

        		$wishDescription = $this->computeWishDescription($doubleDiplome,$wishes,$firstWish,$ddEntity,$mp,$affectation,$affectationWishNumber);
        		
        		if($firstWish || $affectation)
        		{
        			$a[]= $this->computeLine($u,$wishDescription,$affectation,$affectationWishNumber);
        		}
        	}
        	return $a;

        }
        /**
		 * compute a line with global information for csv export
		 *
		 * @param $doubleDiplome	boolean indicate whether the mobility is a double diploma
		 * @param $user 	the user corresponding to the current affectation
		 * @param $wishDescription 	an array describing the different wishes
		 * @param $affectation 	the affectation entity
		 * @param $affectationWishNumber the wish number corresponding to affectation 
		 *
		 */
        private function computeLine(&$user,&$wishDescription,$affectation,$affectationWishNumber)
        {

        	//compute the affectation status ("validated, definitive,... ") DO NOT MODIFY VALUE HERE BUT IN THE ENTITY
        	$affectationStatus="";
        	if($affectation)
	    		$affectationStatus=$affectation->getStatus();

	    	//create the begining of the line
        	$line = array($affectationWishNumber,$affectationStatus,$user->getName(),$user->getFirstName(),$user->getMean(),$user->getYearStudy());
        	        

        	//Important : each line shall have the same number of row => we add an empty row if no $affectation
        	if($affectation)
        	{
	        	$line[] = $affectation->getPlace()->getUniversity()->getCountry()->getName();
	        	$line[] = $affectation->getPlace()->getUniversity()->getName();
	        	$line[] = $affectation->getMobilityPeriod()->getType();
	        }else
	        {
	        	$this->append($line,array('','','' ));
	        }

        	$line[] = "";
        	
        	//append $wish description at end of $line (so function below)
        	$this->append($line,$wishDescription);
        	return $line;

        }

        /**
        * compute the description of the first three wishes
        *
		* @param $doubleDiplome: boolean indicating wether the student is applying to double diploma => will be updated by the method
		* @param $wishes: all the wishes of a user 
		* @param $firstWish: the adress to a pointer describing the firstWish => will be updated by the method
		* @param $ddEntity: the entity of double diplomas => will be updated by the method
 		* @param $mp the mobility: period of the first wish => will be updated by the method
 		* @param $affectation: the entity representing the affectation
 		* @param $affectationWishNumber: the wish number correponding ot affectation
 		* @return an array of string containing the first three wishes
		*/
        private function computeWishDescription(&$doubleDiplome,&$wishes,&$firstWish,&$ddEntity,&$mp,&$affectation,&$affectationWishNumber){
        	$wishDescription = null;
			
			$repository = $this
			->getEntityManager()
			->getRepository('MbMainBundle:Year');

			$year = $repository->getCurrentYear();	
			
			
        	for ($i=1; $i <=4; $i++) { 
        			//get the wish corresponding to $i
        			$wish = $wishes->filter(
					    function($entry) use($i,$year){
					       return $entry->getPriority()==$i && $entry->getYear() == $year ;
					    });
					if($wish->count()>0){
 						$first = $wish->first();
 						$place = $first->getPlace();
						
						if($affectation && ($place)==($affectation->getPlace()))
						{							
							$affectationWishNumber = $i;
						}

						if($i == 1 && !$firstWish)
							$firstWish = $wish->first();
						$mp = $first->getMobilityPeriod();
						if($mp == $ddEntity)
						{
							$doubleDiplome=true;
							$firstWish=$wish->first(); 
						}
						$wishDescription[]=$place->getUniversity()->getName();
					}else{
						$wishDescription[]="";
					}
        		}
        		return $wishDescription;
        }

        private function append(&$line,$wishDescription,$printVoidValue=false)
        {
        	foreach ($wishDescription as  $value) {
        		if($printVoidValue)
        			$line[] = "";
    			else
        			$line[] = $value;		
        	}
        }

	}
